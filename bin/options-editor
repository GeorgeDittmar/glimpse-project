#!/usr/bin/env python

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

from glimpse import core, util
from glimpse.util import gui
import os.path
import sys
import Tkinter
from Tkinter import N, S, E, W
import tkFileDialog

class App(Tkinter.Frame):

  def __init__(self, master = None, fname = None, **args):
    Tkinter.Frame.__init__(self, master, padx = 10, pady = 10, **args)
    self.grid()
    self.entries = []
    self.fname = fname
    # initialize from default options
    self.options = core.MakeDefaultOptions()
    self.widgets = self._CreateWidgets(self.options)
    if fname != None:
      for k, v in core.LoadOptions(fname).items():
        self.options[k] = v
      self._UpdateWidgets()

  def _UpdateWidgets(self):
    for k, v in self.options.items():
      x = self.widgets[k].set(v)

  def _ControlFor(self, key, value, setter = None):
    converter = gui.Converter(type(value))
    args = {}
    # show bool as check box
    if isinstance(value, bool):
      cls = gui.MyCheckbutton
    # otherwise use entry box
    elif util.IsString(value):
      cls = gui.MyEntry
    elif type(value) in (int, float):
      cls = gui.MyEntry
      args['checker'] = converter.Check
    else:
      raise TypeError("Unknown type for value: %s" % type(value))
    args['value'] = value
    def converter_setter(x):
      if setter != None:
        setter(key, converter.Convert(x))
    args['setter'] = converter_setter
    return cls(self, **args)

  def _CreateWidgets(self, options):
    keys = options.keys()
    keys.sort()
    labels = [ Tkinter.Label(self, text = k) for k in keys ]
    controls = [ self._ControlFor(k, options[k], setter = options.__setitem__)
        for k in keys ]
    helpStrs = dict(core.ALL_OPTIONS)
    idx = 0
    for k, l, c in zip(keys, labels, controls):
      l.grid(row = idx, column = 0)
      c.grid(row = idx, column = 1, sticky = W)
      h = helpStrs[k]
      gui.createToolTip(l, h)
      gui.createToolTip(c, h)
      idx += 1

    def OpenFile():
      args = {
        'title' : "Load existing options file",
      }
      if self.fname != None:
        args['initialdir'] = os.path.dirname(self.fname)
      fname = tkFileDialog.askopenfilename(**args)
      if len(fname) > 0:
        self.fname = fname
        for k, v in core.LoadOptions(fname).items():
          self.options[k] = v
        self._UpdateWidgets()

    def SaveFile():
      args = {
        'title' : "Save options file",
      }
      if self.fname != None:
        d, b = os.path.split(self.fname)
        args['initialdir'] = d
        if not b.endswith(".py"):
          args['initialfile'] = b
      fname = tkFileDialog.asksaveasfilename(**args)
      if len(fname) > 0:
        if fname.endswith(".py"):
          fname = fname + ".dat"
        util.Store(self.options, fname)
        self.fname = fname

    def Reset():
      for k, v in core.MakeDefaultOptions().items():
        self.options[k] = v
      self._UpdateWidgets()

    frame = Tkinter.Frame(self)
    openBtn = Tkinter.Button(frame, text = "Open File", command = OpenFile)
    saveBtn = Tkinter.Button(frame, text = "Save File", command = SaveFile)
    resetBtn = Tkinter.Button(frame, text = "Reset to Defaults",
        command = Reset)
    openBtn.grid(row = 0, column = 0, pady = 10, padx = 5)
    saveBtn.grid(row = 0, column = 1, pady = 10, padx = 5)
    resetBtn.grid(row = 0, column = 2, pady = 10, padx = 5)
    frame.grid(row = idx, column = 0, columnspan = 2)
    return dict(zip(keys, controls))

if __name__ == "__main__":
  if len(sys.argv) > 1:
    fname = sys.argv[1]
  else:
    fname = None
  root = Tkinter.Tk()
  root.title("Glimpse Options Editor")
  scrollframe, app = gui.MakeScrollFrame(root,
      lambda master: App(master, fname),
      height = 580)
  root.mainloop()
