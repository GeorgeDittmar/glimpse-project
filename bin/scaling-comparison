#!/usr/bin/python

# Demo script to show the approximate equivalence between the response of scaled
# Gabors to a single input image vs the response of a single-scale Gabor to
# a number of down-sampled version of an input image.

import sys
from scipy.ndimage.interpolation import zoom
from glimpse import core, exp, util
import numpy as np
import os
import math

# Mean frequency response of scaled filters
FREQS = np.array((0.37, 0.21, 0.15, 0.12))
PAD_KWIDTH = 41

class Display:
  def __init__(self, rdir = None, fname = None):
    self.rdir = rdir
    self.fname = fname
  def __enter__(self):
    pyplot.clf()
  def __exit__(self, type, value, traceback):
    if self.rdir != None and self.fname != None:
      savefig(os.path.join(self.rdir, self.fname))

def MultiScaleFilters(retina, rdir = None, display = True):
  options = core.MakeDefaultOptions()
  options['s1_scaling'] = 1
  options['s1_kwidth'] = PAD_KWIDTH
  # Get unclipped multi-scale filters
  mks = core.MakeMultiScaleGaborKernels(11, 4, 2, 1,
      shift_orientations = True, scale_norm = True, embed_kwidth = PAD_KWIDTH)
  # Get response of multi-scale filters to input image
  response_scaled_filters = np.array([ core.BuildS1FromRetina(retina, ks,
      options)[0,0] for ks in mks ])
  # Wrap maps to account for lost border due to convolution
  response_sf_wrap = np.array([ exp.PadArray(r, retina.shape, math.exp(-2))
      for r in response_scaled_filters ])

  if display:
    with Display(rdir, "filters.png"):
      gplot.Show3dArray(mks[:,0,0], cols = 2, colorbar = True,
          titles = ["Kernel %d" % i for i in range(1,5)], show = False)
      suptitle("Filters padded to %dx%d pixels" % (PAD_KWIDTH, PAD_KWIDTH))

  if display:
    with Display(rdir, "power spectrum - filters.png"):
      for i in range(4):
        exp.ShowKernelPowerSpectrum(mks[i,0,0], label = "Kernel %d" % (i+1))
      legend()
      suptitle("Frequency response for scaled filters")

  if display:
    with Display(rdir, "result - scaled filters.png"):
      gplot.Show3dArray(response_sf_wrap, cols = 2, normalize = False,
          colorbars = True, titles = ["Kernel %d" % i for i in range(1,5)],
          show = False)
      suptitle("Response of scaled filters to original image")

  return mks, response_scaled_filters, response_sf_wrap

def MultiScaleImages(retina, rdir = None, display = True):
  options = core.MakeDefaultOptions()
  options['s1_scaling'] = 1
  #~ pad = 11
  pad = PAD_KWIDTH
  options = dict(options)
  options['s1_kwidth'] = pad
  # Down-sample the input image at multiple rates to match change in relative
  # frequencies changes in scaled filters.
  images = [ zoom(retina, x / FREQS[0], prefilter = True, mode = 'nearest')
      for x in FREQS ]
  scales = [ np.array(images[i].shape, float) / np.array(retina.shape)
      for i in range(4) ]
  # Make unclipped single-scale filter
  ks = core.MakeMultiScaleGaborKernels(11, 4, 2, 1, shift_orientations = True,
      scale_norm = True, embed_kwidth = pad)[0]
  # Get response of single filter to multi-scale input image
  response_scaled_images = [ core.BuildS1FromRetina(img, ks, options)[0,0]
      for img in images ]
  # Resize response maps to equivalent scales
  response_si_resize = [ zoom(r, 1 / s, mode = 'nearest')
      for r, s in zip(response_scaled_images, scales) ]
  # Pad response maps to have equal extents
  response_si_wrap = np.array([ exp.PadArray(r, retina.shape, math.exp(-2))
      for r in response_si_resize ])

  if display:
    with Display(rdir, "power spectrum - images.png"):
      for i in range(4):
        exp.ShowKernelPowerSpectrum(images[i], label = "Scale %d" % (i+1))
      legend()
      suptitle("Frequency content of scaled input images")

  if display:
    with Display(rdir, "result - scaled images.png"):
      response_si_pad = [ exp.PadArray(x, images[0].shape, math.exp(-2))
          for x in response_si_resize ]
      gplot.Show2dArrayList(response_si_pad, cols = 2, normalize = False,
          colorbars = True, titles = ["Scale %d" % i for i in range(1,5)],
          show = False)
      suptitle("Response of high-frequency filter to scaled images")

  return images, response_scaled_images, response_si_resize, response_si_wrap

def main(ifname, rdir):
  core.SetUseSSE(False)
  options = core.MakeDefaultOptions()
  t_, retina = core.BuildRetinaFromFile(ifname, options)

  with Display(rdir, "input image.png"):
    gplot.Show2dArray(retina, colorbar = True, show = False)
    suptitle("Preprocessed image")

  mks, response_scaled_filters, response_sf_wrap = \
      MultiScaleFilters(retina, rdir)
  images, response_scaled_images, response_si_resize, response_si_wrap = \
      MultiScaleImages(retina, rdir)

  response_sf_unpad = [ exp.UnpadArray(x, y.shape) for x, y in
      zip(response_scaled_filters, response_si_resize) ]

  #~ corrs = [ np.corrcoef(np.array([ response_sf_unpad[i].flat,
      #~ response_si_resize[i].flat ]))[0,1] for i in range(4) ]

  fs = [ response_sf_unpad[0] ] + [ r[1:] for r in response_sf_unpad[1:] ]
  is_ = [ response_si_resize[0] ] + [ r[:-1] for r in response_si_resize[1:] ]
  corrs = [ np.corrcoef(f.flat, i.flat)[0,1]
      for f, i in zip(fs, is_) ]

  print "Correlation between responses of scaled filters vs scaled images is:\n%s" % corrs

  # Null-hypothesis: correlation between response maps for different filter
  # frequencies. This provides a reference for the correlation of response maps
  # across scaling methods.
  corrs_ref = np.corrcoef(response_scaled_filters.reshape(4, -1))
  print "Cross-Scale Correlation:\n%s" % corrs_ref

if __name__ == "__main__":
  # Parse command line arguments
  if len(sys.argv) < 3:
    sys.exit("usage: %s IMAGE RESULTS" % sys.argv[0])
  ifname, rdir = sys.argv[1:3]
  assert os.path.exists(rdir), "RESULTS dir must exist"
  # Initialize plotting library
  pyplot = util.InitPlot(use_file_output = True)
  from matplotlib.pyplot import *
  from glimpse.util import plot as gplot
  # Run the demo
  gray()
  main(ifname, rdir)

else:
  # Initialize plotting library
  pyplot = util.InitPlot(use_file_output = False)
  from matplotlib.pyplot import *
  from glimpse.util import plot as gplot
