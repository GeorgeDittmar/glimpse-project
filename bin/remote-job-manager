#!/usr/bin/python

# Manages M jobs on N compute nodes, for M > N.
# By default, tries to read list of hosts from ~/etc/cluster/default.
# Requires
#   ssh
#   scp
# to be on the local path (i.e., it must be in a directory included in the PATH
# environment variable), and requires
#   local-job-mkdir
#   local-job-start
#   local-job-status
# to be on the path for every remote node. Requires access from this node to all
# cluster nodes via shared-key authentication, and requires that the login
# message be suppressed on remote nodes (e.g., using ~/.hushlogin).

from glimpse import util
from glimpse.util.cluster import Builder, Network, LoggingManager
import os
import sys

def main():
  opts, args = util.GetOptions('c:dv')
  verbose = False
  debug = False
  cluster_fnames = "~/etc/clusters/linuxlab"
  for opt,arg in opts:
    if opt == '-c':
      cluster_fnames = arg
    elif opt == '-d':
      debug = True
    elif opt == '-v':
      verbose = True
  if len(args) < 1 or args[0] == "-":
    script = sys.stdin
  else:
    script = args[0]
  # Read cluster info
  clusters = {}
  for fname in cluster_fnames.split(","):
    hosts = util.ReadLines(os.path.expanduser(fname))
    clusters[hosts[0]] = hosts[1:]
  # Read job specs from file
  builder = Builder()
  global_namespace = {
    'Job' : builder.AddJob,
    'Repeat' : builder.SetRepeat,
  }
  local_namespace = {}
  if util.IsString(script):
    execfile(script, global_namespace, local_namespace)
  else:
    exec script in global_namespace, local_namespace
  job_specs = builder.MakeJobSpecs()
  if debug:
    from pprint import pprint
    pprint(job_specs)
    return
  # Process jobs
  network = Network(clusters, verbose = verbose)
  manager = LoggingManager(sys.stdout)
  manager.Setup(job_specs, network)
  manager.ProcessJobs()
  print
  print "All jobs completed successfully"

if __name__ == '__main__':
  try:
    main()
  except util.UsageException, e:
    if e.msg:
      print >>sys.stderr, e.msg
    util.Usage(
      "[options] JOB-SPECS\n"
      "options:\n"
      "  -c FNAME Override default clusters. File should contain main cluster\n"
      "           host (for status updates) as first line, then list of\n"
      "           worker hosts (for launching jobs) on proceeding lines.\n"
      "  -d       Enable debugging mode\n"
      "  -v       Be verbose with output"
    )
