== Basic Utilities ==

codex -- transform data files from one format to another. Formats include:
  p: (p)ython-native, binary-encoded format (using the pickle module)
  c: (c)omma-seperated text format
  s: free-form text (s)ummary
np-concat -- Join two arrays.
np-generate -- Evaluate a set of arbitrary Python expressions, writing results
               to the terminal or a file.
np-shape -- Get the shape of an array.
np-split -- Partition an array into a number of segments.
np-stats -- Compute statistics (min, max, mean, std) of values in an array.
show-array -- Convert an N-D array into a greyscale image.

== Experiment Batch Scripts ==
These scripts run a transformation on multiple files at once, and apply an SVM
to the results.

exp-make-splits -- Create training and testing splits for an experiment.
exp-run -- Main experiment control script (see example setup script at
           rc/example-experiment.sh).
exp-svm-crossval -- Compute cross-validated SVM accuracy on transformed images.
exp-svm-for-splits -- Run SVM on transformed images with existing train/test
                      splits.
exp-transform-corpus -- Transform a set of images, and optionally apply an SVM
                        to the results.
get-num-cores -- Tries to determine the number of available processor cores on
                 the host machine.
multi-launch -- Launch a given command N times in background processes, waiting
                for results.

== Hierarchical Models ==
These scripts perform one step of a complete experiment.

draw-bounding-box -- Visualize a bounding box given by points in layer-dependent
                     coordinate system.
draw-s2-bounding-box --
imprint-prototypes -- Generate S2 prototypes by "imprinting" from specific
                      regions of C1 activity computed from a given image.
imprint-random-prototypes -- Generate S2 prototypes by randomly selecting
                             regions of C1 activity computed from an image.
make-random-kernels -- Create a set of randomly-generated S-unit kernels.
transform -- Apply an HMAX-like hierarchy to a single image.
transform-dir -- Apply 'transform' to all images in a list.

== SVM Utilities ==
These scripts apply a linear SVM to an arbitrary set of feature vectors.

compute-roc -- Compute the ROC curve for some classification results.
d-prime -- Compute the d' measure for some classification results.
np-to-svm -- Write a numpy array in LIBSVM format.
optimize-svm-param -- Searches for the optimal setting of the SVM margin penalty
                      with respect to a given training set
svm -- Apply linear SVM to existing training/testing data. Requires the LIBSVM
       and (optionally) SVM-light packages.
svm-classify -- Apply a trained SVM model to a set of instances.
svm-crossval -- Test an SVM using NxM-way cross-validation.
svm-to-np -- Write a dataset in LIBSVM format as a numpy array.

== Job Control Scripts ==
These scripts control an arbitrary job (e.g., an experiment using exp-run) on a
local or remote host.

local-job-kill -- Stop (not pause) a local job.
local-job-delete -- Remove the job files (not directory) of a local job.
local-job-mkdir -- Make a new directory for a local job.
local-job-start -- Launch a new job on the local machine.
local-job-status -- Get the status of a job running on the local machine, given
                    the path to its directory.

== Petacat Commands ==

petacat-apply-c2 -- Use an previously trained SVM model to classify an image.
petacat-learn-c2 -- Given a set of training images, compute the C2 activity from
                    an HMAX-like model and train an SVM classifier.
