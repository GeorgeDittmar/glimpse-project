#!/usr/bin/python

from glimpse.gditlib import GetDirContents, TestSvm, ModelWrapper, ApplyModel
from glimpse import util
import os
import svmutil
import sys
import Image
import ImageDraw
from itertools import imap


def main_iterable(xform_dir, image_dir):
  exp = LoadExperiment(os.path.join(xform_dir, "exp.dat"))

  image = Image.open(image_dir)

  boxes = subwindows(image)
  print "crops done"
  print len(boxes)
  # Compute SVM feature vectors for image crops
  model = ModelWrapper()
  crops = imap(image.crop, boxes)
  img_states = imap(model.ImageToState, crops)
  print "states generated"

  img_c1_activity = model.ComputeC1ActivityIterable(img_states)
  feature_transformer = util.Load(os.path.join(xform_dir,
      'feature-transformer'))

  def progress_updater(xs, update_every = 10):
    count = 0
    for x in xs:
      count += 1
      if count >= update_every:
        print ".",
        sys.stdout.flush()
        count = 0
      yield x

  img_c1_activity = progress_updater(img_c1_activity)
  print "Computing SVM Features:",
  img_features = map(feature_transformer.ComputeSvmFeatures,
      img_c1_activity)
  print
  del img_c1_activity

  # Load and apply the SVM classifier to feature vectors.
  model = svmutil.svm_load_model(os.path.join(xform_dir, 'svm-model'))
  predicted_labels, decision_values = TestSvm(model, img_features,[])
  print "FILE PREDICTED-LABEL CONFIDENCE"
  i = 0
  results = []

  for pl, dv in zip(predicted_labels,
      decision_values):
    results.append(dv)
    print pl, dv
    i = i+1

  print_max(image,boxes,results)

def main(xform_dir, image_dir):
  image = Image.open(image_dir)

  crops = subwindow_crops(image)
  print "crops done"
  print len(crops)
  # Compute SVM feature vectors for image crops
  img_list = [image_dir]
  img_fnames = img_list
  model = ModelWrapper()
 # img_states = map(model.FilenameToState, img_fnames)
  img_states = map(model.ImageToState,crops)
  print "number of states"
  print len(img_states)

  img_c1_activity = model.ComputeC1ActivityIterable(img_states)
  feature_transformer = util.Load(os.path.join(xform_dir,
      'feature-transformer'))
  img_features = map(feature_transformer.ComputeSvmFeatures,
      img_c1_activity)
  del img_c1_activity

  # Load and apply the SVM classifier to feature vectors.
  model = svmutil.svm_load_model(os.path.join(xform_dir, 'svm-model'))
  predicted_labels, decision_values = TestSvm(model, img_features,[])
  print "FILE PREDICTED-LABEL CONFIDENCE"
  i = 0
  for pl, dv in zip(predicted_labels,
      decision_values):
    print pl, dv
    i = i+1

# create a list of crops to process by tiling the windows
def create_croplist(image,window_size):
    # take an image return a list of crops of that image
    width,height = image.size
    croplist = []

    # perform the crops and add them to the croplist
    for y in range(0,height - window_size, window_size):
      for x in range(0,width - window_size, window_size):
          box = (x,y,x+window_size,y+window_size)
          crop = image.crop(box)
          size = (128,128)
          crop = crop.resize(size)
          croplist.append(crop)
    return croplist

def subwindows(image):
  width, height = image.size
  boxes = []
  for y in range(0,height-128,5):
    for x in range(0,width-128,5):
      box = (x,y,x+128,y+128)
      boxes.append(box)
  return boxes



def subwindow_crops(image):
  width,height = image.size
  crops = []
  for y in range(0,height-256,10):
    for x in range(0,width-256,10):
      box = (x,y,x+256,y+256)
      crop = image.crop(box)
      size = (256,256)
      crop = crop.resize(size)
      crops.append(crop)
  return crops

def print_max(image,boxes,results):

  draw = ImageDraw.Draw(image)
  index = 0
  for x in results:
    if x > 0.0:
      draw.rectangle(boxes[index],outline="red")
    index = index + 1
  image.show()


if __name__ == '__main__':
  if len(sys.argv) < 2:
    sys.exit("usage: %s XFORM-DIR IMAGE " % sys.argv[0])
  xform_dir, image_dir= sys.argv[1:3]
  main_iterable(xform_dir, image_dir)
